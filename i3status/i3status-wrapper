#!/usr/bin/env perl
# vim:ts=4:sw=4:expandtab

# i3status-wrapper
# Script to add custom content to i3 status bar.

use utf8;
use strict;
use warnings;
use JSON;

my $BAT0_PATH     = '/sys/class/power_supply/BAT0';

# Energy usage thresholds (for colors)
my $ENERGY_WATTS_HIGH   = 20;
my $ENERGY_WATTS_MEDIUM = 15;

sub get_energy {
    open my $current_file, '<', "$BAT0_PATH/current_now" or return;
    open my $voltage_file, '<', "$BAT0_PATH/voltage_now" or return;

    my $microamps  = <$current_file>;
    my $microvolts = <$voltage_file>;

    close $current_file;
    close $voltage_file;

    my $amps  = $microamps  / 1000000;
    my $volts = $microvolts / 1000000;
    my $watts = $volts * $amps;

    return { amps => $amps, watts => $watts };
}

# Don’t buffer any output.
$| = 1;

# Skip the first line which contains the version header.
print scalar <STDIN>;

# The second line contains the start of the infinite array.
print scalar <STDIN>;

# Read lines forever, ignore a comma at the beginning if it exists.
while ((my $statusline) = (<STDIN> =~ /^,?(.*)/)) {
    # Decode the JSON-encoded line.
    my @blocks = @{decode_json($statusline)};

    # Battery energy consumption
    my %energy_block = (
        name  => 'energy',
        color => '#00FF00'
    );

    if (my $energy = get_energy()) {
        if ($energy->{watts} >= $ENERGY_WATTS_HIGH) {
            $energy_block{color} = '#FF0000';
        }
        elsif ($energy->{watts} >= $ENERGY_WATTS_MEDIUM) {
            $energy_block{color} = '#FFFF00';
        }
        $energy_block{full_text} = sprintf(" %.2fA (%.2fW)", $energy->{amps}, $energy->{watts});
    }

    else {
        $energy_block{full_text} = ' unknown';
    }

    # Insert the energy block at position 3
    splice @blocks, 9, 0, \%energy_block;

    # Output the line as JSON
    print encode_json(\@blocks) . ",\n";
}
